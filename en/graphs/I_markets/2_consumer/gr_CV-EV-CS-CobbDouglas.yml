
colors:
  marginalCost: colors.red
  averageCost: colors.purple
  totalCost: colors.red

params:
  - name: a
    value: 0.5
    min: 0.1
    max: 0.75
    round: 0.05
  - name: p11
    value: 1
    min: 0.5
    max: 3
    round: 0.1
  - name: p12
    value: 2
    min: 0.5
    max: 3
    round: 0.1
  - name: p2
    value: 2
  - name: m
    value: 20

calcs:
  c: params.m * ((params.p12/params.p11)^(params.a))
  p: params.p12/params.p11
  dcs: math.round(2.13, 1)
aspectRatio: 1.2

layout:
  TwoVerticalGraphsPlusSidebar:

    topGraph:
      yAxis:
        title: Bene 2
        max: 15
        min: 0
        ticks: 3
      xAxis:
        title: Bene 1
        max: 32
        min: 0
        ticks: 5
      objects:

        # Original indifference curve
        - EconIndifferenceCurve:
            utilityFunction:
              CobbDouglas: {alpha: (params.a)}
            level: params.m * ((params.a/params.p11)^(params.a)) * (((1-params.a)/(params.p2))^(1-params.a))
            color: Black
            label: dd
            strokeWidth: 1

        # New indifference curve
        - EconIndifferenceCurve:
            utilityFunction:
              CobbDouglas: {alpha: (params.a)}
            level: params.m * ((params.a/params.p12)^(params.a)) * (((1-params.a)/(params.p2))^(1-params.a))
            color: Black
            label: dd
            strokeWidth: 1

        # Original budget line
        - Line:
            slope: -(params.p11)/(params.p2)
            point: [0,(params.m)/(params.p2)]
            color: Green
            label:
              text:
              x: 33
              position: tl
            strokeWidth: 1.5

        # New budget line
        - Line:
            slope: -(params.p12)/(params.p2)
            point: [0,(params.m)/(params.p2)]
            color: Green
            label:
              text:
              x: 33
              position: tl
            strokeWidth: 1.5

        # Compensated budget line
        - Line:
            slope: -(params.p12)/(params.p2)
            point: [0,(calcs.c)/(params.p2)]
            color: Red
            label:
              text:
              x: 33
              position: tl
            strokeWidth: 0.75

        # Original optimum
        - Point:
            coordinates: [(params.a)*(params.m)/(params.p11),(1-(params.a))*(params.m)/(params.p2)]
            droplines:
              vertical: math.round((params.a)*(params.m)/(params.p11), 1)
              horizontal: math.round((1-(params.a))*(params.m)/(params.p2), 1)
            color: Blue

        # New optimum
        - Point:
            coordinates: [params.a*params.m/params.p12,(1-(params.a))*(params.m)/(params.p2)]
            droplines:
              vertical: math.round((params.a)*(params.m)/(params.p12), 1)
              horizontal: math.round((1-(params.a))*(params.m)/(params.p2), 1)
            color: Blue

        # Compensated optimum
        - Point:
            coordinates: [params.a*calcs.c/params.p12,(1-(params.a))*(calcs.c)/(params.p2)]
            droplines:
              vertical: math.round((params.a)*(calcs.c)/(params.p12), 1)
              horizontal: math.round((1-(params.a))*(calcs.c)/(params.p2), 1)
            color: Purple

    bottomGraph:
      yAxis:
        title: Euro
        max: 3.5
        ticks: 0
      xAxis:
        title: Bene 1
        max: 32
        ticks: 0
      objects:

# price line  
        - Line:
            slope: 0
            point: [0,params.p11]
            color: Green
            label:
              text: P
              x: 31
            strokeWidth: 1.5
            drag:
              - vertical: p11

# new price line  
        - Line:
            slope: 0
            point: [0,params.p12]
            color: Green
            label:
              text: P'
              x: 29
            strokeWidth: 1.5
            drag:
              - vertical: p12

        # Walrasian demand function
        - Curve:
            fn: params.a * params.m / (x)
            color: Blue
            label:
              text: "`X^d_1`"
              x: 3.1
            strokeWidth: 1.5

        # Hicksian demand function
        - Curve:
            fn: (( params.a * params.m ) / ( (x) * ((params.p11)^params.a) ))^(1/(1-params.a))
            color: Purple
            label:
              text: "`X^c_1`"
              x: params.a*(params.m * ((3.25/params.p11)^(params.a)))/3.25
            strokeWidth: 1.5

        # Original optimum
        - Point:
            coordinates: [params.a*params.m/params.p11,params.p11]
            droplines:
              vertical: math.round((params.a)*(params.m)/(params.p11), 1)
              horizontal: math.round(params.p11, 1)
            color: Blue

        # New optimum
        - Point:
            coordinates: [params.a*params.m/params.p12,params.p12]
            droplines:
              vertical: math.round((params.a)*(params.m)/(params.p12), 1)
              horizontal: math.round(params.p12, 1)
            color: Blue

        # Compensated optimum
        - Point:
            coordinates: [params.a*calcs.c/params.p12,params.p12]
            droplines:
              vertical: math.round((params.a)*(calcs.c)/(params.p12), 1)
              horizontal:
            color: Purple

        # Negative variation in CS when price increases
        - Area:
            fn1: min(params.p12,((params.a*params.m)/((x)*((params.p11)^params.a)))^(1/(1-params.a)),(params.a*params.m)/(x))
            fn2: min(params.p11,params.p12)
            fill: Red
            opacity: 0.3
            min: 0
            max: max(params.a*params.m/params.p11,params.a*calcs.c/params.p12)

        # Difference between CV and DeltaCS when price increases
        - Area:
            fn1: min(params.p12,((params.a*params.m)/((x)*((params.p11)^params.a)))^(1/(1-params.a)))
            fn2: min((params.a*params.m)/(x),params.p12)
            fill: Purple
            opacity: 0.3
            min: 0
            max: max(params.a*params.m/params.p11,params.a*calcs.c/params.p12)

        # Positive variation in CS when price decreases
        - Area:
            fn1: min(params.p11,((params.a*params.m)/((x)*((params.p11)^params.a)))^(1/(1-params.a)))
            fn2: min(params.p11,params.p12)
            fill: Green
            min: 0
            max: max(params.a*params.m/params.p11,params.a*calcs.c/params.p12)

        # Difference between CV and DeltaCS when price increases
        - Area:
            fn1: min(params.p11,(params.a*params.m)/(x))
            fn2: min(params.p11,max((params.p12),((params.a*params.m)/((x)*((params.p11)^params.a)))^(1/(1-params.a))))
            fill: Blue
            opacity: 0.2
            min: 0
            max: params.a*params.m/params.p12


    sidebar:
      controls:
      - title: Titolo
        description: Descrizione
        sliders:
        - param: a
          label: \alpha
        - param: p11
          label: P_1
        - param: p12
          label: P'_1
        divs:
          - html: "`Quando il prezzo del bene 1 aumenta da $P_1 = ${params.p11.toFixed(1)}$ a $P'_1 = ${params.p12.toFixed(1)}$, per acquistare il paniere rappresentato dal 
            punto viola è necessario un reddito pari a $M'=${calcs.c.toFixed(1)}$ . La variazione compensativa è quindi
            $$ CV = M - M' = ${(params.m)} - ${calcs.c.toFixed(1)} = ${math.round((params.m) - (calcs.c),1)}, $$ pari al negativo 
            della somma delle aree rossa e viola, ovvero il negativo dell'area sotto la 
            curva di domanda compensata $X^c_1$ e compresa tra $P_1 = ${params.p11.toFixed(1)}$ e $P'_1 = ${params.p12.toFixed(1)}$.  `"
            show: params.p11 < params.p12
          - html: "`La variazione di surplus del consumatore, invece, è il negativo dell'area rossa, ovvero il negativo dell'area sotto la 
            curva di domanda $X^d_1$ e compresa tra $P_1 = ${params.p11.toFixed(1)}$ e $P'_1 = ${params.p12.toFixed(1)}$, e risulta essere pari a
            $$ \\\\Delta CS = ${math.round((params.a) * (params.m) * math.log( (params.p11)/(params.p12) ),1)}. $$  `"
            show: params.p11 < params.p12
          - html: "`Quando il prezzo del bene 1 diminuisce da $P_1 = ${params.p11.toFixed(1)}$ a $P'_1 = ${params.p12.toFixed(1)}$, per acquistare il paniere rappresentato dal 
            punto viola è necessario un reddito pari a $M'=${calcs.c.toFixed(1)}$ . La variazione compensativa è quindi
            $$ CV = M - M' = ${(params.m)} - ${calcs.c.toFixed(1)} = ${math.round((params.m) - (calcs.c),1)}, $$ pari 
            all'area verde, ovvero l'area sotto la 
            curva di domanda compensata $X^c_1$ e compresa tra $P_1 = ${params.p11.toFixed(1)}$ e $P'_1 = ${params.p12.toFixed(1)}$.  `"
            show: params.p11 > params.p12
          - html: "`La variazione di surplus del consumatore, invece, è pari alla somma delle aree verde e azzurra, ovvero l'area sotto la 
            curva di domanda $X^d_1$ e compresa tra $P_1 = ${params.p11.toFixed(1)}$ e $P'_1 = ${params.p12.toFixed(1)}$, e risulta essere pari a
            $$ \\\\Delta CS = ${math.round((params.a) * (params.m) * math.log( (params.p11)/(params.p12) ),1)}. $$  `"
            show: params.p11 > params.p12




    explanation:
      divs:
        - html: "`Quando il prezzo del bene 1 aumenta da $P_1 = ${params.p11.toFixed(1)}$ a $P'_1 = ${params.p12.toFixed(1)}$, la variazione di surplus del consumatore
            $ \\\\Delta CS = ${math.round((params.a) * (params.m) * math.log( (params.p11)/(params.p12) ),1)}$ è, in valore assoluto,
            minore della variazione compensativa $ CV = ${math.round((params.m) - (calcs.c),1)}$. Quindi la variazione di surplus del consumatore
             <strong>sottovaluta</strong> la perdita di benessere del consumatore. Tuttavia la discrepanza tra $\\\\Delta CS$ e $CV$ è tanto più
            piccola quanto più è piccolo $a_1$ rispetto ad $a_2$ ovvero quanto più piccolo è $\\\\alpha = a_1/(a_1+a_2)$. `"
          show: params.p11 < params.p12
        - html: "`Quando il prezzo del bene 1 diminuisce da $P_1 = ${params.p11.toFixed(1)}$ a $P'_1 = ${params.p12.toFixed(1)}$, la variazione di surplus del consumatore
            $ \\\\Delta CS = ${math.round((params.a) * (params.m) * math.log( (params.p11)/(params.p12) ),1)}$ è
            maggiore della variazione compensativa $ CV = ${math.round((params.m) - (calcs.c),1)}$. Quindi la variazione di surplus del consumatore
             <strong>sopravvaluta</strong> il guadagno di benessere del consumatore. Tuttavia la discrepanza tra $\\\\Delta CS$ e $CV$ è tanto più
            piccola quanto più è piccolo $a_1$ rispetto ad $a_2$ ovvero quanto più piccolo è $\\\\alpha = a_1/(a_1+a_2)$. `"
          show: params.p11 > params.p12
